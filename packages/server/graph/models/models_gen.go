// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Call struct {
	Time    int    `json:"time"`
	Success bool   `json:"success"`
	Type    string `json:"type"`
}

type Category struct {
	ID       int          `json:"id"`
	Name     string       `json:"name"`
	UserID   int          `json:"userId"`
	ParentID *int         `json:"parentId"`
	Type     CategoryType `json:"type"`
}

type Schedule struct {
	ID            int          `json:"id"`
	Date          time.Time    `json:"date"`
	IntervalStart string       `json:"intervalStart"`
	IntervalEnd   string       `json:"intervalEnd"`
	Type          ScheduleType `json:"type"`
	Color         *string      `json:"color"`
}

type Tokens struct {
	AuthToken    string `json:"authToken"`
	RefreshToken string `json:"refreshToken"`
}

type User struct {
	ID            string  `json:"id"`
	FirstName     *string `json:"firstName"`
	LastName      *string `json:"lastName"`
	Email         string  `json:"email"`
	Phone         string  `json:"phone"`
	EmailVerified bool    `json:"emailVerified"`
	PhoneVerified bool    `json:"phoneVerified"`
	Role          Role    `json:"role"`
	AuthToken     string  `json:"authToken"`
	RefreshToken  string  `json:"refreshToken"`
}

type CallType string

const (
	CallTypeNew    CallType = "New"
	CallTypeRepeat CallType = "Repeat"
)

var AllCallType = []CallType{
	CallTypeNew,
	CallTypeRepeat,
}

func (e CallType) IsValid() bool {
	switch e {
	case CallTypeNew, CallTypeRepeat:
		return true
	}
	return false
}

func (e CallType) String() string {
	return string(e)
}

func (e *CallType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CallType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CallType", str)
	}
	return nil
}

func (e CallType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CategoryType string

const (
	CategoryTypeFree   CategoryType = "free"
	CategoryTypeParent CategoryType = "parent"
	CategoryTypeChild  CategoryType = "child"
)

var AllCategoryType = []CategoryType{
	CategoryTypeFree,
	CategoryTypeParent,
	CategoryTypeChild,
}

func (e CategoryType) IsValid() bool {
	switch e {
	case CategoryTypeFree, CategoryTypeParent, CategoryTypeChild:
		return true
	}
	return false
}

func (e CategoryType) String() string {
	return string(e)
}

func (e *CategoryType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CategoryType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CategoryType", str)
	}
	return nil
}

func (e CategoryType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleMaster Role = "master"
	RoleClient Role = "client"
)

var AllRole = []Role{
	RoleMaster,
	RoleClient,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleMaster, RoleClient:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ScheduleType string

const (
	ScheduleTypeOnce    ScheduleType = "once"
	ScheduleTypeDaily   ScheduleType = "daily"
	ScheduleTypeWeekly  ScheduleType = "weekly"
	ScheduleTypeMonthly ScheduleType = "monthly"
	ScheduleTypeWeekday ScheduleType = "weekday"
)

var AllScheduleType = []ScheduleType{
	ScheduleTypeOnce,
	ScheduleTypeDaily,
	ScheduleTypeWeekly,
	ScheduleTypeMonthly,
	ScheduleTypeWeekday,
}

func (e ScheduleType) IsValid() bool {
	switch e {
	case ScheduleTypeOnce, ScheduleTypeDaily, ScheduleTypeWeekly, ScheduleTypeMonthly, ScheduleTypeWeekday:
		return true
	}
	return false
}

func (e ScheduleType) String() string {
	return string(e)
}

func (e *ScheduleType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ScheduleType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ScheduleType", str)
	}
	return nil
}

func (e ScheduleType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
