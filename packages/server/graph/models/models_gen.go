// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
)

type Call struct {
	Time    int    `json:"time"`
	Success bool   `json:"success"`
	Type    string `json:"type"`
}

type CallType string

const (
	CallTypeNew    CallType = "New"
	CallTypeRepeat CallType = "Repeat"
)

var AllCallType = []CallType{
	CallTypeNew,
	CallTypeRepeat,
}

func (e CallType) IsValid() bool {
	switch e {
	case CallTypeNew, CallTypeRepeat:
		return true
	}
	return false
}

func (e CallType) String() string {
	return string(e)
}

func (e *CallType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CallType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CallType", str)
	}
	return nil
}

func (e CallType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
